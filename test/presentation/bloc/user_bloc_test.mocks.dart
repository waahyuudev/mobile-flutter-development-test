// Mocks generated by Mockito 5.3.2 from annotations
// in mobile_development_test/test/presentation/bloc/user_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mobile_development_test/data/failure.dart' as _i6;
import 'package:mobile_development_test/data/models/user_model.dart' as _i9;
import 'package:mobile_development_test/domain/entities/user.dart' as _i7;
import 'package:mobile_development_test/domain/repositories/user_repository.dart'
    as _i2;
import 'package:mobile_development_test/domain/usecases/add_user.dart' as _i8;
import 'package:mobile_development_test/domain/usecases/get_user_list.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserRepository_0 extends _i1.SmartFake
    implements _i2.UserRepository {
  _FakeUserRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUserList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserList extends _i1.Mock implements _i4.GetUserList {
  MockGetUserList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.User>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.User>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.User>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.User>>>);
}

/// A class which mocks [AddUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddUser extends _i1.Mock implements _i8.AddUser {
  MockAddUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> execute(_i9.UserModel? userModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [userModel],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #execute,
            [userModel],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
